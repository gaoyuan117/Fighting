package me.kw.mall.activity;import android.content.Intent;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.LinearLayout;import android.widget.TextView;import com.android.zcomponent.http.api.model.MessageData;import com.android.zcomponent.http.constant.ErrorCode;import com.android.zcomponent.json.JsonSerializerFactory;import com.android.zcomponent.util.ImageLoaderUtil;import com.nostra13.universalimageloader.core.DisplayImageOptions;import com.nostra13.universalimageloader.core.ImageLoader;import com.xiangying.fighting.R;import com.xiangying.fighting.common.BaseApplication;import butterknife.Bind;import butterknife.OnCheckedChanged;import butterknife.OnClick;import me.kw.mall.constant.ResultActivity;import me.kw.mall.dao.ScoreDao;import me.kw.mall.model.OrderBusiness;import me.kw.mall.model.scoremodel.JifenCommonReturn;import service.api.JiFenService;import service.api.Order;public class OrderRefundActivity extends MallBaseActivity {  @Bind(R.id.checkbox_wondnot_bay_show) CheckBox mCheckboxWondnotBuy;  @Bind(R.id.checkbox_click_error_show) CheckBox mCheckboxClickError;  @Bind(R.id.checkbox_des_error_show) CheckBox mCheckboxDesError;  @Bind(R.id.checkbox_another_show) CheckBox mCheckboxAnother;  @Bind(R.id.tvew_order_name_show) TextView mOrderNameTV;  @Bind(R.id.llayout_order_item) LinearLayout mItemllayout;  private Order mOrder;  @Override protected int getLayoutId() {    return R.layout.activity_order_refund;  }  @Override protected void initUI() {    getTitleBar().setTitleText("申请退款");    Intent intent = getIntent();    mOrder = JsonSerializerFactory.Create().decode(intent.getStringExtra("order"), Order.class);    if (mOrder != null) {      showOrderItem();    }  }  @Override  public void onRecvMsg(MessageData msg) throws Exception {    if (msg.valiateReq(JiFenService.JifenOrderRefundRequest.class)) {      JifenCommonReturn response = msg.getRspObject();      if (response != null) {        if (response.code == ErrorCode.INT_QUERY_DATA_SUCCESS) {          showToast("申请成功");          BaseApplication.getInstance().setActivityResult(ResultActivity.CODE_REFUND_SUCCESS, null);          finish();        } else {          showToast(response.data);          finish();        }      } else {        showToast("申请退款失败");        finish();      }    }  }  private void showOrderItem() {    if (mOrder.shop_title != null) {      mOrderNameTV.setText(mOrder.shop_title);    } else {      mOrderNameTV.setText(mOrder.products[0].shop_title);    }    DisplayImageOptions options = ImageLoaderUtil.getDisplayImageOptions(R.drawable        .img_empty_logo_small);    OrderBusiness.showOrderItem(this, mItemllayout, mOrder.products, ImageLoader.getInstance(),        options);  }  @OnClick(R.id.tvew_submit_click)  void onClickSubmitRefund() {    if (mOrder == null) {      showToast("为查询到订单");      return;    }    String reason = "";    if (mCheckboxWondnotBuy.isChecked()) {      reason = "我不想买了";    } else if (mCheckboxClickError.isChecked()) {      reason = "我点错了";    } else if (mCheckboxDesError.isChecked()) {      reason = "描述与产品不符";    } else if (mCheckboxAnother.isChecked()) {      reason = "其他";    } else {      showToast("请选择退款原因");      return;    }    ScoreDao.sendOrderRefund(getHttpDataLoader(), mOrder.order_id, reason);  }  @OnCheckedChanged({R.id.checkbox_wondnot_bay_show, R.id.checkbox_click_error_show,      R.id.checkbox_des_error_show, R.id.checkbox_another_show})  void onChecked(CompoundButton buttonView, boolean isChecked) {    if (buttonView == mCheckboxWondnotBuy) {      mCheckboxAnother.setChecked(false);      mCheckboxDesError.setChecked(false);      mCheckboxClickError.setChecked(false);    } else if (buttonView == mCheckboxDesError) {      mCheckboxClickError.setChecked(false);      mCheckboxWondnotBuy.setChecked(false);      mCheckboxAnother.setChecked(false);    } else if (buttonView == mCheckboxClickError) {      mCheckboxWondnotBuy.setChecked(false);      mCheckboxAnother.setChecked(false);      mCheckboxDesError.setChecked(false);    } else if (buttonView == mCheckboxAnother) {      mCheckboxDesError.setChecked(false);      mCheckboxWondnotBuy.setChecked(false);      mCheckboxClickError.setChecked(false);    }  }  @OnClick(R.id.rlayout_wondnot_bay_click)  void onClickRlayoutPayLimit() {    initCheckBox();    mCheckboxWondnotBuy.setChecked(true);  }  @OnClick(R.id.rlayout_click_error_click)  void onClickRlayoutPayZhifb() {    initCheckBox();    mCheckboxClickError.setChecked(true);  }  @OnClick(R.id.rlayout_des_error_click)  void onClickRlayoutPayWeixin() {    initCheckBox();    mCheckboxDesError.setChecked(true);  }  @OnClick(R.id.rlayout_another_click)  void onClickRlayoutPayYinlian() {    initCheckBox();    mCheckboxAnother.setChecked(true);  }  private void initCheckBox() {    mCheckboxWondnotBuy.setChecked(false);    mCheckboxClickError.setChecked(false);    mCheckboxAnother.setChecked(false);    mCheckboxDesError.setChecked(false);  }}